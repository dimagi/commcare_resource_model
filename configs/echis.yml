# Only storage calculations are made, compute calculations are incorrect

estimation_buffer: 0.25
estimation_growth_factor: 0.01  # buffer increases by 1% per month
storage_buffer: 0.33  # keep max storage at 75% of disk
storage_display_unit: TB

summary_dates:
  - '2021-07'
  - '2021-12'
  - '2022-06'

vm_os_storage_gb: 50
vm_os_storage_group: 'VM_os'

usage:
  # 2 users per Health Post
  users:
    model: 'date_range_value'
    ranges:
      - ['20210701', '20210901', 12600]
      - ['20211001', '20211201', 16200]
      - ['20220101', '20220601', 20000]

  # 3/4th active users
  active_users:
    model: 'date_range_value'
    ranges:
      - ['20210701', '20210901', 9450]
      - ['20211001', '20211201', 12150]
      - ['20220101', '20220601', 15000]

  forms_monthly:
    model: 'derived_factor'
    dependant_field: 'active_users'
    factor: 642

  cases_monthly:
    model: 'derived_factor'
    dependant_field: 'active_users'
    factor: 3800 # avg of last 6 months

  # Total Forms ever created
  # select count(*) from form_processor_xforminstancesql;
  forms_total:
    model: 'cumulative'
    dependant_field: 'forms_monthly'
    start_with: 15730552

  # select count(*) from form_processor_commcarecasesql;
  cases_total:
    model: 'cumulative'
    dependant_field: 'cases_monthly'
    start_with: 21030287

  device_logs:
    model: 'baseline_with_growth'
    dependant_field: 'active_users'
    baseline: 0
    monthly_growth: 20000 # avg of last 6 months
    start_with: 277130979

  # todo; ignored
  forms_per_sec_max:
    model: 'derived_factor'
    dependant_field: 'forms_monthly'
    factor: 0.000000182  # 2 forms per second for 1.1M forms per month


  # Number of cases updated per user per month
  # Waited factor from below query
  # select count(*) as num_forms, d.count as num_updates from (select count(*) as count from form_processor_casetransaction group by form_id) as d group by d.count;
  case_transactions:
    model: 'derived_factor'
    dependant_field: 'forms_monthly'
    factor: 1.14959713  # 3 cases per form
  # Total Case Transaction
  # select count(*) from form_processor_casetransaction;
  case_transactions_total:
    model: 'cumulative'
    dependant_field: 'case_transactions'
    start_with: 34619792

  # select count(*) from form_processor_commcarecaseindexsql; / cases_total
  case_indices:
    model: 'derived_factor'
    dependant_field: 'cases_total'
    factor: 0.8485

  # weighted factor from below query
  # select count(*), d.count from (select count(*) as count from phone_synclogsql group by user_id) as d group by d.count order by d.count;
  # todo validate lifespan
  synclogs_monthly:
    model: 'derived_factor'
    dependant_field: 'active_users'
    factor: 7.8
  synclogs_total:
    model: 'cumulative_limited_lifespan'
    dependant_field: 'synclogs_monthly'
    lifespan: 2  # we only keep synclogs for 2 months

  # todo ignored
  restores_per_second:
    model: 'derived_factor'
    dependant_field: 'synclogs_monthly'
    factor: 0.000001325  # 0.03 restores per second for 22650 restores per month

  # todo ignored
  requests_per_second:
    model: 'derived_sum'
    dependant_fields:
      - 'restores_per_second'
      - 'forms_per_sec_max'

  # todo validate lifespan
  kafka_changes:
    model: 'derived_sum'
    dependant_fields:
      - 'forms_monthly'
      - 'cases_monthly'
      - 'case_transactions'
      - 'synclogs_monthly'
  kafka_changes_total:
    model: 'cumulative_limited_lifespan'
    dependant_field: 'kafka_changes'
    lifespan: 2  # keep kafka changes for 2 months

services:
  pg_shards:
    static_number: 1
    include_ha_resources: True
    storage:
      group: 'SSD'
      # sum of pg_table_size + pg_index_size per number of rows for each table
      data_models:
        - referenced_field: 'forms_total'
          unit_size: 917
        - referenced_field: 'cases_total'
          unit_size: 1713
        - referenced_field: 'case_indices'
          unit_size: 409
        - referenced_field: 'case_transactions_total'
          unit_size: 533
    process:
      cores_per_node: 2
      ram_per_node: 8

  pg_main:
    storage_scales_with_nodes: True
    static_number: 1
    include_ha_resources: True
    storage:
      group: 'SSD'
      static_baseline: 100GB
      data_models:
        - referenced_field: 'device_logs'
          unit_size: 830
    process:
      cores_per_node: 2
      ram_per_node: 8

  pg_synclogs:
    static_number: 1
    storage:
      group: 'SSD'
      data_models:
        # sum of pg_table_size + pg_index_size per number of rows for each table
        - referenced_field: 'synclogs_total'
          unit_size: 294858
    process:
      cores_per_node: 2
      ram_per_node: 4

  couchdb:
    static_number: 4
    storage:
      group: 'SSD'
      redundancy_factor: 2
      static_baseline: 50GB  # to account for other databases
      override_storage_buffer: 0.8  # space for compaction
      data_models:
        - referenced_field: 'users'
          unit_size: 5500
    process:
      cores_per_node: 2
      ram_per_node: 4

  es_datanode:
    # From _stats API
    static_number: 4
    storage:
      group: 'SAS'
      data_models:
        # form-index-size/FormES().count
        # case-index-size/CaseES().count
        - referenced_field: 'forms_total'
          unit_size: 3350
        - referenced_field: 'cases_total'
          unit_size: 2295
    process:
      cores_per_node: 2
      ram_per_node: 16

  minio:
    usage_capacity_per_node: 4000
    # select avg(content_length), type_code, count(*) from blobs_blobmeta group by type_code;
    # avg attachment size of 7263 bytes
    # RAM requirement per key = 130b
    # num keys = 10TB / (12560b x 3<redundancy factor>)
    # RAM needed = 130b x num keys = 35GB (64GB avail per node)
    max_storage_per_node: 1TB
    storage:
      group: 'SSD'
      redundancy_factor: 2
      static_baseline: 250GB  # to account for exports etc
      data_models:
        - referenced_field: 'forms_total'
          unit_size: 7263
    # todo: ignored
    process:
      cores_per_node: 4
      # need to be able to fit all keys in RAM since we're using bitcask backend
      ram_per_node: 16
      ram_model:
      - referenced_field: 'forms_total'
        # key size (45 + 6 + 79) (overhead + bucket + key)
        # bucket = 'blobdb'
        # new keys are smaller but stick with old key length for safety:
        #   new: form/xxxxxxxxxxxxxxuuidxxxxxxxxxxxxxx/Xpi-XM9CZvQ
        #   old: form/xxxxxxxxxxxxxxuuidxxxxxxxxxxxxxx/form.xml.xxxxxxxxxxxxxxuuidxxxxxxxxxxxxxx
        unit_size: 130
      ram_redundancy_factor: 3
      ram_static_baseline: 1  # per node

  pg_ucr:
    static_number: 1
    include_ha_resources: True
    storage:
      group: 'SSD'
      # obtained from project-stats-report
      # total UCR size by number of docs by form/case
      data_models:
        - referenced_field: 'cases_total'  # cumulative
          unit_size: 6135
        - referenced_field: 'forms_total'  # cumulative
          unit_size: 451
    process:
      cores_per_node: 2
      ram_per_node: 8

  pillowtop:
    static_number: 1
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0
    process:
      cores_per_node: 8
      ram_per_node: 32

  celery:
    static_number: 1
    process:
      cores_per_node: 8
      ram_per_node: 32
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0

  django:
    # 1 gunicorn worker can handle 1 request every 2 seconds
    usage_field: 'requests_per_second'
    storage_scales_with_nodes: True
    process:
      cores_per_node: 4
      ram_per_node: 8
      cores_per_sub_process: 1
      ram_per_sub_process: 0.7
      sub_processes:
        - name: 'gunicorn_worker'
          capacity: 0.5
    storage:
      group: 'VM_other'
      static_baseline: 50GB
      override_storage_buffer: 0
      override_estimation_buffer: 0

  redis:
    static_number: 1
    process:
      cores_per_node: 1
      ram_per_node: 8
      ram_model:
        - referenced_field: 'active_users'
          unit_size: 50KB
      ram_static_baseline: 4
    storage:
      group: 'SAS'
      data_models:
        - referenced_field: 'active_users'
          unit_size: 50KB

  nginx:
    static_number: 1
    process:
      cores_per_node: 2
      ram_per_node: 4
    storage:
      group: 'VM_other'
      static_baseline: 50GB  # logs etc
      override_storage_buffer: 0
      override_estimation_buffer: 0

  rabbitmq:  # limits for rabbitmq not clear
    static_number: 1
    storage_scales_with_nodes: True
    process:
      cores_per_node: 2
      ram_per_node: 4
    storage:  # don't have a model for rabbitmq storage
      group: 'SAS'
      static_baseline: 50GB
      override_storage_buffer: 0
      override_estimation_buffer: 0

  kafka:
    static_number: 1
    storage:
      group: 'SAS'
      data_models:
        - referenced_field: 'kafka_changes_total'
          unit_size: 500
    process:
      cores_per_node: 2
      ram_per_node: 4

  formplayer:
    static_number: 1
    process:
      cores_per_node: 2
      ram_per_node: 4
    storage:
      group: 'SAS'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0
