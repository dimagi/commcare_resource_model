estimation_buffer: 0.2
estimation_growth_factor: 0.025  # buffer increases by 2.5% per month
storage_buffer: 0.25
storage_display_unit: TB

summary_dates:
  - '2018-10'
  - '2019-03'
  - '2019-07'
  - '2019-12'

vm_os_storage_gb: 70
vm_os_storage_group: 'VM'

usage:
# User on a particular date
  users:
    model: 'date_value_list'
    values:
      - ['20180901', 130000]
      - ['20181001', 140000]
      - ['20181101', 250000]
      - ['20181201', 250000]
      - ['20190101', 250000]
      - ['20190201', 250000]
      - ['20190301', 250000]
      - ['20190401', 500000]
      - ['20190501', 500000]
      - ['20190601', 500000]
      - ['20190701', 500000]
      - ['20190801', 700000]
      - ['20190901', 700000]
      - ['20191001', 700000]
      - ['20191101', 700000]
      - ['20191201', 700000]

  # LS User as a percent of total User
  ls_users:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 0.04
  # Number of formaplayer user from X date to Y
  formplayer_users:
    model: 'date_range_value'
    ranges:
      - ['20180901', '20191201', 1000]
  
  #Number of forms per user per month
  forms:
    model: 'derived_factor'
    start_with: 329680028   # from ES form index (total docs)
    dependant_field: 'users'
    factor: 350  # datadog data for Oct 2018 (40M for 115K active users)
  # Total Forms ever created
  forms_total:
    model: 'cumulative'
    dependant_field: 'forms'

  #Number of cases per user per month
  cases:
    start_with: 204427935   # from ES case index (total docs)
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 600  # based on assumptions about app ((also see `cases_created_per_user_per_month` in queries.yml)
  # Total cases ever created
  cases_total:
    model: 'cumulative'
    dependant_field: 'cases'
  
  case_transactions:
    start_with: 1240906740
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 1000  # see `cases_updated_per_user_month` in queries.yml
  # Total Case Transaction
  case_transactions_total:
    model: 'cumulative'
    dependant_field: 'case_transactions'
  # Case indexes ever created
  case_indices:
    model: 'derived_factor'
    dependant_field: 'cases_total'
    factor: 1  # case index count (from SQL) / case count

  # What tables in which table can yield these details.
  async_indicators:
    model: 'derived_factor'
    dependant_field: 'case_transactions'
    factor: 0.1

  # used for SMS & UCR calculations
  person_cases:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 750  # similar to task cases

  phone_numbers:
    model: 'derived_factor'
    dependant_field: 'person_cases'
    factor: 0.25  # phone number count (from SQL) / person cases (from ES)

  task_cases:
    start_with: 14860902
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 70  # see `task_cases_opened_per_user_per_month` in queries.yml
  task_ledgers:  # ledgers are only on task cases
    start_with: 54840197
    model: 'derived_factor'
    dependant_field: 'task_cases'
    factor: 15  # ledger count (from SQL) / task case count (from ES)
  task_ledger_updates:
    model: 'derived_factor'
    dependant_field: 'task_cases'
    factor: 25  # case transactions of type 'ledger' on task cases (from SQL)

  synclogs:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 60  # estimate from data analysis (SQL)
  synclogs_total:
    model: 'cumulative_limited_lifespan'
    dependant_field: 'images'
    lifespan: 2  # we only keep synclogs for 2 months

  images:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 35  # image count / user count
  images_total:
    model: 'cumulative_limited_lifespan'
    dependant_field: 'images'
    lifespan: 3  # we only keep images for 3 months


  # See https://docs.google.com/spreadsheets/d/16evR_N95TUBFlIr3D3ojasX7yN4odDOxH5mgcF6VCkQ/edit#gid=0 for sms estimates`
  sms_adoleschent_girls:
    model: 'derived_factor'
    dependant_field: 'person_cases'
    factor: 0.24  # estimated percentage of adolescent girls times number of messages per month (0.12 x 2)
  sms_pregnancies:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 25  # estimated number of pregnancies per awc times number of messages per month (5 x 5)
  sms_aww:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 5.17  # 5 per month per user as well as 1 more every 6 months
  sms_ls:
    model: 'derived_factor'
    dependant_field: 'ls_users'
    factor: 3.17  # 3 per month per user as well as 1 more every 6 months
  sms_monthly_total:
    model: 'derived_sum'
    start_with: 3438200
    dependant_fields:
      - 'sms_adoleschent_girls'
      - 'sms_pregnancies'
      - 'sms_aww'
      - 'sms_ls'
  sms_total:
    model: 'cumulative'
    dependant_field: 'sms_monthly_total'
  sms_models_total:
    model: 'derived_factor'
    dependant_field: 'sms_total'
    factor: 10  # sms (1) + smsbillables (1) + messagingevent (4) + messagingsubevent (4)

  kafak_changes:
    # we only keep kafka changes for 28 days so no need to calculate the cumulative amount
    model: 'derived_sum'
    dependant_fields:
      - 'forms'
      - 'cases'
      - 'case_transactions'
      - 'task_ledger_updates'
      - 'synclogs'
      - 'sms_monthly_total'

services:
  pg_shards:
    usage_capacity_per_node: 25000
    storage:
      group: 'SSD'
      data_models:
        - referenced_field: 'forms_total'
          unit_size: 1200
        - referenced_field: 'cases_total'
          unit_size: 1800
        - referenced_field: 'case_indices'
          unit_size: 380
        - referenced_field: 'case_transactions_total'
          unit_size: 515
        - referenced_field: 'task_ledgers'
          unit_size: 450
        - referenced_field: 'task_ledger_updates'
          unit_size: 420
        - referenced_field: 'images_total'
          unit_size: 370
        - referenced_field: 'sms_total'
          unit_size: 683  # casetimedscheduleinstance
    process:
      cores_per_node: 16
      ram_per_node: 48

  pg_main:
    usage_capacity_per_node: 150000
    storage_scales_with_nodes: True
    min_nodes: 2
    storage:
      group: 'SSD'
      static_baseline: 50GB  # to account for other static tables
      data_models:
        - referenced_field: 'phone_numbers'
          unit_size: 660
        - referenced_field: 'users'
          unit_size: 1600
        - referenced_field: 'async_indicators'
          unit_size: 1025
        - referenced_field: 'sms_models_total'
          unit_size: 501  # averaged over all models
    process:
      cores_per_node: 16
      ram_per_node: 48

  pg_synclogs:
    usage_capacity_per_node: 500000
    storage:
      group: 'SSD'
      data_models:
        - referenced_field: 'synclogs'
          unit_size: 210000
    process:
      cores_per_node: 16
      ram_per_node: 48

  couchdb:
    usage_capacity_per_node: 30000
    min_nodes: 3
    storage:
      group: 'SSD'
      redundancy_factor: 3
      static_baseline: 20GB  # to account for other databases
      data_models:
        - referenced_field: 'users'
          unit_size: 600000   # disk size / doc count of icds @ 2017-12-13
    process:
      cores_per_node: 4
      ram_per_node: 16

  elasticsearch:
    usage_capacity_per_node: 25000
    min_nodes: 3
    storage:
      group: 'SAS'
      redundancy_factor: 2
      data_models:
        - referenced_field: 'forms_total'
          unit_size: 5500
        - referenced_field: 'cases_total'
          unit_size: 1800
        - referenced_field: 'case_transactions_total'
          unit_size: 250
        - referenced_field: 'task_ledgers'
          unit_size: 500
        - referenced_field: 'sms_total'
          unit_size: 675
    process:
      cores_per_node: 8
      ram_per_node: 64

  kafka:
    usage_capacity_per_node: 100000
    storage:
      group: 'SAS'
      data_models:
        - referenced_field: 'kafak_changes'
          unit_size: 500
    process:
      cores_per_node: 4
      ram_per_node: 8

  riakcs:
    usage_capacity_per_node: 50000
    # avg attachment size of 12560 bytes (11000*0.96 + 50000*0.04)
    # RAM requirement per key = 130b
    # num keys = 10TB / (12560b x 3<redundancy factor>)
    # RAM needed = 130b x num keys = 35GB (64GB avail per node)
    max_storage_per_node: 10TB
    min_nodes: 10
    storage:
      group: 'SAS'
      redundancy_factor: 3
      static_baseline: 1TB  # to account for exports etc
      data_models:
        - referenced_field: 'forms_total'  # 96% of objects
          unit_size: 11000
        - referenced_field: 'images_total'  # 4% of objects
          unit_size: 50000
    process:
      # current load quite low (~15%) (2018-10-11)
      cores_per_node: 8
      # need to be able to fit all keys in RAM since we're using bitcask backend
      # Current usage is at 30% (2018-10-11)
      ram_per_node: 64
      ram_model:
      - referenced_field: 'forms_total'
        # key size (45 + 6 + 79) (overhead + bucket + key)
        # bucket = 'blobdb'
        # new keys are smaller but stick with old key length for safety:
        #   new: form/xxxxxxxxxxxxxxuuidxxxxxxxxxxxxxx/Xpi-XM9CZvQ
        #   old: form/xxxxxxxxxxxxxxuuidxxxxxxxxxxxxxx/form.xml.xxxxxxxxxxxxxxuuidxxxxxxxxxxxxxx
        unit_size: 130
      - referenced_field: 'images_total'
        unit_size: 130
      ram_redundancy_factor: 3
      ram_static_baseline: 1  # per node

  pg_ucr:
    usage_capacity_per_node: 50000
    storage_scales_with_nodes: True
    min_nodes: 2
    storage:
      # This is a rough estimate.
      # The person case UCR is 35% of total UCR usage.
      group: 'SSD'
      data_models:
        - referenced_field: 'person_cases'
          unit_size: 9000  # inflated to account for others UCRs
        - referenced_field: 'cases'  # cumulative
          unit_size: 4000  # to account for monthly data etc.
    process:
      cores_per_node: 16
      ram_per_node: 64

  pg_warehouse:
    usage_capacity_per_node: 150000
    storage_scales_with_nodes: True
    storage:
      group: 'SSD'
      data_models:
        - referenced_field: 'forms_total'
          unit_size: 4000  # to account for monthly data etc.
    process:
      cores_per_node: 16
      ram_per_node: 64

  pillowtop:  # will need to revamp this once combined pillows are rolled out
    process:
      cores_per_node: 8
      ram_per_node: 16
      cores_per_sub_process: 0.5
      ram_per_sub_process: 0.7
      sub_processes:
        - name: 'other'
          capacity: 15000  # covers all other pillows
        - name: 'FormSubmissionMetadataTrackerPillow'
          capacity: 15000
        - name: 'XFormToElasticsearchPillow'
          capacity: 15000
        - name: 'kafka-ucr-static-forms'
          capacity: 5000
        - name: 'kafka-ucr-static-cases'
          capacity: 2000
        - name: 'CaseToElasticsearchPillow'
          capacity: 2000

  celery:
    process:
      cores_per_node: 8
      ram_per_node: 16
      cores_per_sub_process: 1
      ram_per_sub_process: 0.7
      sub_processes:
        - name: 'reminder_case_update_queue'
          capacity: 2000
        - name: 'reminder_queue'
          capacity: 65000
        - name: 'ucr_indicator_queue'
          capacity: 5000
        - name: 'icds_dashboard_reports_queue'
          capacity: 15000
        - name: 'sms_queue'
          capacity: 32500
        - name: 'case_rule_queue'
          capacity: 120000
        - name: 'reminder_rule_queue'
          capacity: 120000
        - name: 'submission_reprocessing_queue'
          capacity: 120000

  django:
    usage_capacity_per_node: 15000
    process:
      cores_per_node: 8
      ram_per_node: 16

  redis:
    usage_capacity_per_node: 100000
    min_nodes: 3
    process:
      cores_per_node: 4
      ram_per_node: 8

  nginx:  # limits for nginx not clear
    usage_capacity_per_node: 250000
    process:
      cores_per_node: 4
      ram_per_node: 8

  rabbitmq:  # limits for rabbitmq not clear
    usage_capacity_per_node: 150000
    process:
      cores_per_node: 4
      ram_per_node: 8

  formplayer:
    usage_capacity_per_node: 1000
    usage_field: 'formplayer_users'
    process:
      cores_per_node: 4
      ram_per_node: 8
    storage:
      group: 'SAS'
      data_models:
        - referenced_field: 'formplayer_users'
          unit_size: 100MB  # 100MB
