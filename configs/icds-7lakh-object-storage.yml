estimation_buffer: 0.2
estimation_growth_factor: 0.01  # buffer increases by 1% per month
storage_buffer: 0.33  # keep max storage at 75% of disk
storage_display_unit: TB

summary_dates:
#  - '2018-10'
#  - '2018-12'
#  - '2019-02'
#  - '2019-04'
#  - '2019-06'
  - '2019-12'

vm_os_storage_gb: 50
vm_os_storage_group: 'VM_os'

usage:
  # TODO: adjust to match https://docs.google.com/spreadsheets/d/1PbLrv70Cp4gablzGyLdGEgxApw5376oNslZKlncT8iM/edit#gid=2043695881
  users:
    model: 'date_range_value'
    ranges:
      # User counts based on historical data
#      - ['20170101', '20170201', 500]
#      - ['20170301', 20000]
#      - ['20170401', 40000]
#      - ['20170501', '20171001', 50000]
#      - ['20171101', 60000]
#      - ['20171201', '20180301', 90000]
#      - ['20180401', '20180501', 100000]
#      - ['20180601', '20181201', 115000]
#      - ['20190101', 120000]
      - ['20180901', '20181201', 115000]
      - ['20190101', '20190201', 140000]
      - ['20190301', '20190501', 400000]
      - ['20190601', '20191201', 700000]

  # LS User as a percent of total User
  ls_users:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 0.05
  # Number of formplayer user from X date to Y
  formplayer_users:
    model: 'date_range_value'
    ranges:
      - ['20180901', '20191201', 1000]

  #Number of forms per user per month
  forms_monthly:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 1000
  forms_daily:
    model: 'derived_factor'
    dependant_field: 'forms_monthly'
    factor: 0.03
  # Total Forms ever created
  forms_total:
    model: 'cumulative'
    dependant_field: 'forms_monthly'
    start_with: 329680028   # from ES form index (total docs)

  #Number of cases per user per month
  cases_total:
    model: 'baseline_with_growth'
    dependant_field: 'users'
    baseline: 1000  # inflated number by MWCD. Actual probably closer to 1000
    monthly_growth: 100  # guess (4 cases for every new person case)
    start_with: 204427935   # from ES case index (total docs)

  # Number of cases updated per user per month
  case_transactions:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 1000  # inflated number by MWCD. Actual closer to 1000
  # Total Case Transaction
  case_transactions_total:
    model: 'cumulative'
    dependant_field: 'case_transactions'
    start_with: 1240906740

  # Case indexes ever created
  case_indices:
    model: 'derived_factor'
    dependant_field: 'cases_total'
    factor: 1  # case index count (from SQL) / case count

  # used for SMS & UCR calculations
  person_cases_total:
    model: 'baseline_with_growth'
    dependant_field: 'users'
    baseline: 1000
    monthly_growth: 28  # https://confluence.dimagi.com/display/ICDS/Case+Structure+and+Workflow#CaseStructureandWorkflow-CASCaseSizingEstimates

  # assume 100% phone number capture rate
  beneficiary_phone_numbers:
    model: 'derived_factor'
    dependant_field: 'person_cases_total'
    factor: 1  # 100% seeding
  phone_numbers:
    model: 'derived_sum'
    dependant_fields:
      - 'beneficiary_phone_numbers'
      - 'users'  # 100% seeding
      - 'ls_users'  # 100% seeding

  pregancy_cases:
    model: 'baseline_with_growth'
    dependant_field: 'users'
    baseline: 6
    monthly_growth: 1
  child_cases:
    model: 'baseline_with_growth'
    dependant_field: 'users'
    baseline: 100
    monthly_growth: 1
  ledgers_preg:
    model: 'derived_factor'
    dependant_field: 'pregancy_cases'
    factor: 5
  ledgers_child:
    model: 'derived_factor'
    dependant_field: 'child_cases'
    factor: 35
  ledgers_total:
    model: 'derived_sum'
    dependant_fields:
      - 'ledgers_preg'
      - 'ledgers_child'
  ledger_transactions:
    model: 'derived_factor'
    dependant_field: 'ledgers_total'
    factor: 2  # 2 transactions per ledger (ever)
  ledger_updates_preg:
    model: 'derived_factor'
    dependant_field: 'pregancy_cases_baseline'  # active pregnancy cases
    factor: 0.6
  ledger_updates_child:
    model: 'derived_factor'
    dependant_field: 'child_cases_baseline'  # active child cases
    factor: 0.6
  ledger_updates_monthly:
    model: 'derived_sum'
    dependant_fields:
      - 'ledger_updates_preg'
      - 'ledger_updates_child'

  synclogs:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 60  # estimate from data analysis (SQL)
  synclogs_total:
    model: 'cumulative_limited_lifespan'
    dependant_field: 'synclogs'
    lifespan: 2  # we only keep synclogs for 2 months

  images:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 600  # daily feeding + THR + AG
  images_total:
    model: 'cumulative_limited_lifespan'
    dependant_field: 'images'
    lifespan: 3  # we only keep images for 3 months

  # This is modelled because it accounts for significant storage in the main PG database
  # This model could be improved or we find another way to account for this data
  # Data taken from datadog in Jan 2019. Table size peaks at 1.2M rows (120K active users)
  async_indicators:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 50  # inflated to be safe

  # See https://docs.google.com/spreadsheets/d/1vzp5kLHBm6IXKI39LTDS2pN69uMryXuBkpl7c8sxik8/edit#gid=1536669590 for sms estimates
  # (old https://docs.google.com/spreadsheets/d/16evR_N95TUBFlIr3D3ojasX7yN4odDOxH5mgcF6VCkQ/edit#gid=0)
### PHASE 1 SMS
  sms_monthly_total:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 10  # current usage of 10 messages per user per month (avg)
  sms_total:
    model: 'cumulative'
    dependant_field: 'sms_monthly_total'
    start_with: 3438200
  sms_models_total:
    model: 'derived_factor'
    dependant_field: 'sms_total'
    factor: 10  # sms (1) + smsbillables (1) + messagingevent (4) + messagingsubevent (4)
### PHASE 2 SMS (assuming 100% phone number capture rate)
#  sms_adolescent_girls:
#    model: 'derived_factor'
#    dependant_field: 'users'
#    factor: 60  # 20 adolescent girls per aws x 3 messages per month
#  sms_pregnancies:
#    model: 'derived_factor'
#    dependant_field: 'users'
#    factor: 20  # 4 pregnancies per awc X 5 messages per month
#  sms_lactating_women:
#    model: 'derived_factor'
#    dependant_field: 'users'
#    factor: 35  # 7 lactating women per awc X 5 messages per month
#  sms_aww:
#    model: 'derived_factor'
#    dependant_field: 'users'
#    factor: 7  # 7 per month per user
#  sms_ls:
#    model: 'derived_factor'
#    dependant_field: 'ls_users'
#    factor: 5  # 5 per month per user
#  sms_monthly_total:
#    model: 'derived_sum'
#    start_with: 3438200
#    dependant_fields:
#      - 'sms_adolescent_girls'
#      - 'sms_pregnancies'
#      - 'sms_lactating_women'
#      - 'sms_aww'
#      - 'sms_ls'
#  sms_total:
#    model: 'cumulative_limited_lifespan'
#    dependant_field: 'sms_monthly_total'
#    lifespan: 3
#  sms_models_total:
#    model: 'derived_factor'
#    dependant_field: 'sms_total'
#    factor: 10  # sms (1) + smsbillables (1) + messagingevent (4) + messagingsubevent (4)

  # casetimedscheduleinstance table in shard database
  sms_schedule_instances_total:
    model: 'derived_factor'
    dependant_field: 'person_cases_total'
    factor: 1  # rough guess

  kafka_changes:
    model: 'derived_sum'
    dependant_fields:
      - 'forms_monthly'
      - 'cases_total_monthly'
      - 'case_transactions'
      - 'ledger_updates_monthly'
      - 'synclogs'
      - 'sms_monthly_total'
  kafka_changes_total:
    model: 'cumulative_limited_lifespan'
    dependant_field: 'kafka_changes'
    lifespan: 2  # keep kafka changes for 2 months

services:
  pg_shards:
    # this should have standbys for HA
    # need higher performing SSDs
    usage_capacity_per_node: 25000
    include_ha_resources: True
    storage:
      group: 'SSD'
      data_models:
        - referenced_field: 'forms_total'
          unit_size: 1200
        - referenced_field: 'cases_total'
          unit_size: 1800
        - referenced_field: 'case_indices'
          unit_size: 380
        - referenced_field: 'case_transactions_total'
          unit_size: 515
        - referenced_field: 'ledgers_total'
          unit_size: 450
        - referenced_field: 'ledger_transactions'
          unit_size: 420
        - referenced_field: 'images_total'
          unit_size: 370
        - referenced_field: 'sms_schedule_instances_total'
          unit_size: 683
    process:
      cores_per_node: 32
      ram_per_node: 128

  pg_proxy:
    usage_capacity_per_node: 150000
    storage_scales_with_nodes: True
    storage:
      group: 'VM_other'
      static_baseline: 200GB
      override_storage_buffer: 0
      override_estimation_buffer: 0
    process:
      cores_per_node: 16
      ram_per_node: 64

  pg_main:
    usage_capacity_per_node: 150000
    storage_scales_with_nodes: True
    min_nodes: 2
    storage:
      group: 'SSD'
      static_baseline: 250GB  # to account for other static tables
      data_models:
        - referenced_field: 'phone_numbers'
          unit_size: 550
        - referenced_field: 'users'
          unit_size: 1600
        - referenced_field: 'async_indicators'
          unit_size: 6626
        - referenced_field: 'sms_models_total'
          unit_size: 510  # averaged over all models taking model ratios into account
    process:
      cores_per_node: 32
      ram_per_node: 128

  # planning to shard this
  pg_synclogs:
    usage_capacity_per_node: 250000
    storage:
      group: 'SSD'
      data_models:
        - referenced_field: 'synclogs'
          unit_size: 210000
    process:
      cores_per_node: 32
      ram_per_node: 128

  couchdb:
    usage_capacity_per_node: 50000
    min_nodes: 3
    storage:
      group: 'SSD'
      redundancy_factor: 3
      static_baseline: 50GB  # to account for other databases
      override_storage_buffer: 0.8  # space for compaction
      data_models:
        - referenced_field: 'users'
          unit_size: 600000   # disk size / doc count of icds @ 2017-12-13
    process:
      cores_per_node: 16
      ram_per_node: 64

  es_datanode:
    usage_capacity_per_node: 15000
    min_nodes: 3
    storage:
      group: 'SAS'
      redundancy_factor: 2
      data_models:
        - referenced_field: 'forms_total'
          unit_size: 5500
        - referenced_field: 'cases_total'
          unit_size: 1800
        - referenced_field: 'case_transactions_total'
          unit_size: 250
        - referenced_field: 'ledgers_total'
          unit_size: 500
        - referenced_field: 'sms_total'
          unit_size: 675
    process:
      cores_per_node: 16
      ram_per_node: 64

  es_master:
    static_number: 6
    storage_scales_with_nodes: True
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0
    process:
      cores_per_node: 8
      ram_per_node: 16

  kafka:
    usage_capacity_per_node: 200000
    min_nodes: 3
    storage:
      group: 'SAS'
      data_models:
        - referenced_field: 'kafka_changes_total'
          unit_size: 500
    process:
      cores_per_node: 16
      ram_per_node: 32

  riakcs:
    usage_capacity_per_node: 50000
    # avg attachment size of 12560 bytes (11000*0.96 + 50000*0.04)
    # RAM requirement per key = 130b
    # num keys = 10TB / (12560b x 3<redundancy factor>)
    # RAM needed = 130b x num keys = 35GB (64GB avail per node)
    max_storage_per_node: 25TB
    min_nodes: 10
    storage:
      group: 'blob'
#      redundancy_factor: 3
      static_baseline: 1TB  # to account for exports etc
      data_models:
        - referenced_field: 'forms_total'  # 96% of objects
          unit_size: 11000
        - referenced_field: 'images_total'  # 4% of objects
          unit_size: 50000
    process:
      # current load quite low (~15%) (2018-10-11)
      cores_per_node: 32
      # need to be able to fit all keys in RAM since we're using bitcask backend
      # Current usage is at 30% (2018-10-11)
      ram_per_node: 128
      ram_model:
      - referenced_field: 'forms_total'
        # key size (45 + 6 + 79) (overhead + bucket + key)
        # bucket = 'blobdb'
        # new keys are smaller but stick with old key length for safety:
        #   new: form/xxxxxxxxxxxxxxuuidxxxxxxxxxxxxxx/Xpi-XM9CZvQ
        #   old: form/xxxxxxxxxxxxxxuuidxxxxxxxxxxxxxx/form.xml.xxxxxxxxxxxxxxuuidxxxxxxxxxxxxxx
        unit_size: 130
      - referenced_field: 'images_total'
        unit_size: 130
      ram_redundancy_factor: 3
      ram_static_baseline: 1  # per node

  pg_ucr:
    usage_capacity_per_node: 100000
    storage_scales_with_nodes: True
    min_nodes: 2
    storage:
      # This is a rough estimate.
      # The person case UCR is 35% of total UCR usage.
      group: 'SSD'
      data_models:
        - referenced_field: 'person_cases_total'
          unit_size: 9000  # inflated to account for others UCRs
        - referenced_field: 'cases_total'  # cumulative
          unit_size: 4000  # to account for monthly data etc.
    process:
      cores_per_node: 32
      ram_per_node: 256

  pg_ucr_citus:
    # This should have standby nodes
    usage_capacity_per_node: 50000
    include_ha_resources: True
    storage:
      # This is a rough estimate.
      # The person case UCR is 35% of total UCR usage.
      group: 'SSD'
      # this was in the wrong place so got left out by mistake
      data_models:
        - referenced_field: 'person_cases_total'
          unit_size: 9000  # inflated to account for others UCRs
        - referenced_field: 'cases_total'  # cumulative
          unit_size: 8000  # to account for monthly data etc.
    process:
      cores_per_node: 32
      ram_per_node: 256

  pg_warehouse:
    usage_capacity_per_node: 300000
    storage_scales_with_nodes: True
    storage:
      group: 'SSD'
      data_models:
        - referenced_field: 'forms_total'
          unit_size: 4000  # to account for monthly data etc.
    process:
      cores_per_node: 16
      ram_per_node: 128

  pg_warehouse_citus:
    # this should have replica nodes
    usage_capacity_per_node: 150000
    include_ha_resources: True
    storage:
      group: 'SSD'
      # this got left out by mistakes
      data_models:
        - referenced_field: 'forms_total'
          unit_size: 4000  # to account for monthly data etc.
        - referenced_field: 'cases_total'  # add cases in case we add them later
          unit_size: 4000
    process:
      cores_per_node: 32
      ram_per_node: 256

  pillowtop:  # will need to revamp this once combined pillows are rolled out
    storage_scales_with_nodes: True
    process:
      cores_per_node: 16
      ram_per_node: 48
      cores_per_sub_process: 0.5
      ram_per_sub_process: 0.7
      sub_processes:
        - name: 'other'
          capacity: 7000  # covers all other pillows
        - name: 'FormSubmissionMetadataTrackerPillow'
          capacity: 7000
        - name: 'XFormToElasticsearchPillow'
          capacity: 7000
        - name: 'kafka-ucr-static-forms'
          capacity: 2500
        - name: 'kafka-ucr-static-cases'
          capacity: 1000
        - name: 'CaseToElasticsearchPillow'
          capacity: 1000
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0

  celery:
    storage_scales_with_nodes: True
    process:
      cores_per_node: 16
      ram_per_node: 48
      cores_per_sub_process: 0.7  # reduced from 1 since we use django VMs as well
      ram_per_sub_process: 0.5  # reduced from 0.7 since we use django VMs as well
      sub_processes:
        - name: 'reminder_case_update_queue'
          capacity: 1000
        - name: 'reminder_queue'
          capacity: 30000
        - name: 'ucr_indicator_queue'
          capacity: 5000
        - name: 'icds_dashboard_reports_queue'
          capacity: 7000
        - name: 'sms_queue'
          capacity: 15000
        - name: 'case_rule_queue'
          capacity: 60000
        - name: 'reminder_rule_queue'
          capacity: 60000
        - name: 'submission_reprocessing_queue'
          capacity: 60000
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0

  django:
    usage_capacity_per_node: 15000
    storage_scales_with_nodes: True
    process:
      cores_per_node: 16
      ram_per_node: 48
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0

  redis:
    usage_capacity_per_node: 200000
    min_nodes: 3
    process:
      cores_per_node: 12
      ram_per_node: 96
      ram_model:
        - referenced_field: 'users'
          unit_size: 50KB
      ram_static_baseline: 33  # per node (assume only 50% ram is usable)
    storage:
      group: 'SAS'
      data_models:
        - referenced_field: 'users'
          unit_size: 50KB

  # potentially deploy redis as a cache for object storage if object storage
  # performance isn't up to scratch
  redis_os_cache:
    usage_capacity_per_node: 150000
    min_nodes: 3
    process:
      cores_per_node: 16  # can run multiple instances per VM if necessary
      ram_per_node: 128
      ram_model:
        - referenced_field: 'forms_daily'
          unit_size: 11KB
      ram_static_baseline: 33  # per node (assume only 50% ram is usable)
    storage:
      group: 'SAS'
      data_models:
        - referenced_field: 'forms_daily'
          unit_size: 11KB

  nginx:  # limits for nginx not clear
    usage_capacity_per_node: 250000
    storage_scales_with_nodes: True
    process:
      cores_per_node: 16
      ram_per_node: 64
    storage:
      group: 'VM_other'
      static_baseline: 250GB  # logs etc
      override_storage_buffer: 0
      override_estimation_buffer: 0

  rabbitmq:  # limits for rabbitmq not clear
    static_number: 4
    storage_scales_with_nodes: True
    process:
      cores_per_node: 32
      ram_per_node: 128
    storage:  # don't have a model for rabbitmq storage
      group: 'SAS'
      static_baseline: 500GB
      override_storage_buffer: 0
      override_estimation_buffer: 0

  formplayer:
    usage_capacity_per_node: 500
    usage_field: 'formplayer_users'
    process:
      cores_per_node: 8
      ram_per_node: 16
    storage:
      group: 'SAS'
      data_models:
        - referenced_field: 'formplayer_users'
          unit_size: 200MB

  airflow:
    static_number: 4
    storage_scales_with_nodes: True
    process:
      cores_per_node: 8
      ram_per_node: 32
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0

  control:
    static_number: 1
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0
    process:
      cores_per_node: 4
      ram_per_node: 8
