estimation_buffer: 0
estimation_growth_factor: 0.01  # buffer increases by 1% per month
storage_buffer: 0.33  # keep max storage at 75% of disk
storage_display_unit: TB
vm_os_storage_gb: 50
vm_os_storage_group: 'VM_os'

summary_dates:
  - '2022-04'

sets:
  vars:
    - name: vars
      users: 7876
      sms_monthly: 3696785
      sms_baseline: sms_monthly*12
      forms_monthly: 2877119
      forms_baseline: forms_monthly*12  # 12 months
      case_transaction_monthly: 9167941
      cases_created_per_user_per_month: 500
      cases_monthly: users*cases_created_per_user_per_month
      cases_baseline: cases_monthly*12  # 12 months
      case_transaction_baseline: case_transaction_monthly*12  # 12 months cases * 2 transactions

usage:
  users:
    model: 'date_range_value'
    ranges:
      - [ '20220401', '{users}' ]

  forms_monthly:
    model: 'date_range_value'
    ranges:
      - [ '20220401', '{forms_monthly}' ]

  cases_monthly:
    model: 'date_range_value'
    ranges:
      - [ '20220401', '{cases_monthly}' ]

  sms_monthly:
    model: 'date_range_value'
    ranges:
      - [ '20220401', '{sms_monthly}' ]

  forms_per_user:
    model: 'invert_derived_factor'
    dependant_field: 'forms_monthly'
    factor: '{users}'

  cases_per_user:
    model: 'invert_derived_factor'
    dependant_field: 'cases_monthly'
    factor: '{users}'

  sms_per_user:
    model: 'invert_derived_factor'
    dependant_field: 'sms_monthly'
    factor: '{users}'

  sms_per_case:
    model: 'invert_derived_factor'
    dependant_field: 'sms_monthly'
    factor: '{cases_monthly}'

  sms_total:
    model: 'cumulative'
    dependant_field: 'sms_monthly'
    start_with: '{sms_baseline}'

  forms_daily:
    model: 'derived_factor'
    dependant_field: 'forms_monthly'
    factor: 0.03

  forms_total:
    model: 'cumulative'
    dependant_field: 'forms_monthly'
    start_with: '{forms_baseline}'

  cases_total:
    model: 'cumulative'
    dependant_field: 'cases_monthly'
    start_with: '{cases_baseline}'

  case_transactions:
    model: 'derived_factor'
    dependant_field: 'cases_monthly'
    factor: 2  # assume every case gets updated twice per month

  # Total Case Transaction
  case_transactions_total:
    model: 'cumulative'
    dependant_field: 'case_transactions'
    start_with: '{case_transaction_baseline}'

  # Case indexes ever created
  case_indices:
    model: 'derived_factor'
    dependant_field: 'cases_total'
    factor: 1

  synclogs_monthly:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 60  # estimate from data analysis (SQL)
  synclogs_total:
    model: 'cumulative_limited_lifespan'
    dependant_field: 'synclogs_monthly'
    lifespan: 2  # we only keep synclogs for 2 months
  synclog_requests_per_day:
    model: 'derived_factor'
    dependant_field: 'synclogs_monthly'
    factor: 0.04  # 26 days in a month (exclude Sunday)
  peak_synclog_requests_per_15min:
    model: 'derived_factor'
    dependant_field: 'synclog_requests_per_day'
    # # Ratio of daily syncs to max syncs in 15 min interval
    # https://docs.google.com/spreadsheets/d/1MQ0pmrVqBKacDbyo5-PBAeMZ-Lm2z8GZ6oexV65iVL4/edit#gid=193271304
    factor: 0.05

  kafka_changes:
    model: 'derived_sum'
    dependant_fields:
      - 'forms_monthly'
      - 'cases_monthly'
      - 'case_transactions'
      - 'synclogs_monthly'
      - 'sms_monthly'

  kafka_changes_total:
    model: 'cumulative_limited_lifespan'
    dependant_field: 'kafka_changes'
    lifespan: 2  # keep kafka changes for 2 months

  peak_forms_per_15_min:
    model: 'derived_factor'
    dependant_field: 'forms_daily'
    # # Ratio of daily forms to max forms in 15 min interval
    # See https://docs.google.com/spreadsheets/d/1MQ0pmrVqBKacDbyo5-PBAeMZ-Lm2z8GZ6oexV65iVL4/edit#gid=1860153301
    factor: 0.035
    # ^ This is currently adjusted to eliminate some amount of buffer uniquely from workers since the bufffer
    # algorithm is quite sensitive on webworkers, and buffer on throughput is included in the model. It's
    # equivalent to the 1 std-dev-above-baseline number, but with almost no additional buffer applied beyond that
    # We should likely recalibrate if we make big changes to the topline baseline.

  peak_other_requests_per_15min:
    model: 'derived_factor'
    dependant_field: 'peak_synclog_requests_per_15min'
    factor: 3  # heartbeat and app update checks roughly save volume as syncs

  preak_requests_per_15_min:
    model: 'derived_sum'
    dependant_fields:
      - 'peak_forms_per_15_min'
      - 'peak_synclog_requests_per_15min'
      - 'peak_other_requests_per_15min'

services:
  pg_shards:
    # this should have standbys for HA
    usage_capacity_per_node: 25000
    include_ha_resources: False
    storage:
      group: 'SSD'
      data_models:
        - referenced_field: 'forms_total'
          unit_size: 1200
        - referenced_field: 'cases_total'
          unit_size: 1800
        - referenced_field: 'case_indices'
          unit_size: 380
        - referenced_field: 'case_transactions_total'
          unit_size: 515
#        - referenced_field: 'ledgers_total'
#          unit_size: 450
#        - referenced_field: 'ledger_transactions'
#          unit_size: 420
#        - referenced_field: 'images_total'
#          unit_size: 370
        - referenced_field: 'sms_total'
          unit_size: 683
    process:
      cores_per_node: 32
      ram_per_node: 128

  pg_proxy:
    usage_capacity_per_node: 150000
    storage_scales_with_nodes: True
    storage:
      group: 'VM_other'
      static_baseline: 200GB
      override_storage_buffer: 0
      override_estimation_buffer: 0
    process:
      cores_per_node: 16
      ram_per_node: 64

  pg_main:
    usage_capacity_per_node: 150000
    storage_scales_with_nodes: True
#    min_nodes: 2
    storage:
      group: 'SSD'
      static_baseline: 250GB  # to account for other static tables
      data_models:
        - referenced_field: 'users'
          unit_size: 1600
        - referenced_field: 'sms_total'
          unit_size: 510  # averaged over all models taking model ratios into account
        - referenced_field: 'synclogs_total'  # adding here since we don't need an extra DB just for this
          unit_size: 210000
    process:
      cores_per_node: 32
      ram_per_node: 128

  couchdb:
    usage_capacity_per_node: 50000
    min_nodes: 3
    storage:
      group: 'SSD'
      redundancy_factor: 3
      static_baseline: 50GB  # to account for other databases
      override_storage_buffer: 0.8  # space for compaction
      data_models:
        - referenced_field: 'users'
          unit_size: 600000   # disk size / doc count of icds @ 2017-12-13
    process:
      cores_per_node: 16
      ram_per_node: 64

  es_datanode:
    usage_capacity_per_node: 15000
    min_nodes: 2
    storage:
      group: 'SAS'
      redundancy_factor: 2
      data_models:
        - referenced_field: 'forms_total'
          unit_size: 5500
        - referenced_field: 'cases_total'
          unit_size: 1800
        - referenced_field: 'case_transactions_total'
          unit_size: 250
        - referenced_field: 'sms_total'
          unit_size: 675
    process:
      cores_per_node: 16
      ram_per_node: 64

  es_master:
    static_number: 3
    storage_scales_with_nodes: True
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0
    process:
      cores_per_node: 8
      ram_per_node: 16

  kafka:
    usage_capacity_per_node: 200000
    min_nodes: 3
    storage:
      group: 'SAS'
      data_models:
        - referenced_field: 'kafka_changes_total'
          unit_size: 500
    process:
      cores_per_node: 16
      ram_per_node: 32

  object_storage:
    aggregation_key: Object Storage
    storage:
      group: 's3'
      static_baseline: 200GB  # to account for exports etc
      override_storage_buffer: 0
      data_models:
        - referenced_field: 'forms_total'  # 96% of objects
          unit_size: 11000

  # cover other pillows that don't need to be scaled
  pillowtop_static:
    aggregation_key: Application
    static_number: 1
    storage_scales_with_nodes: True
    process:
      cores_per_node: 16
      ram_per_node: 32
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0

  pillowtop_cases:
    aggregation_key: Application
    usage_field: 'case_transactions'
    storage_scales_with_nodes: True
    process:
      cores_per_node: 16
      ram_per_node: 32
      cores_per_sub_process: 0.5
      ram_per_sub_process: 0.7
      sub_processes:
        - name: 'kafka-ucr-static-cases'
          capacity: 1750000  # this is largely dependent on the UCR DB performance
        - name: 'CaseToElasticsearchPillow'
          capacity: 3000000
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0

  pillowtop_forms:
    aggregation_key: Application
    usage_field: 'forms_monthly'
    storage_scales_with_nodes: True
    process:
      cores_per_node: 16
      ram_per_node: 32
      cores_per_sub_process: 0.5
      ram_per_sub_process: 0.7
      sub_processes:
        - name: 'FormSubmissionMetadataTrackerPillow'
          capacity: 5000000
        - name: 'XFormToElasticsearchPillow'
          capacity: 5000000
        - name: 'kafka-ucr-static-forms'
          capacity: 2000000   # this is largely dependent on the UCR DB performance
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0

  # queues that scale with # users
  celery_users:
    aggregation_key: Application
    storage_scales_with_nodes: True
    process:
      cores_per_node: 16
      ram_per_node: 32
      cores_per_sub_process: 1
      ram_per_sub_process: 0.7
      sub_processes:
        - name: 'submission_reprocessing_queue'
          capacity: 100000  # not really true but OK
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0

  # cover other celery queues that don't need to be scaled
  celery_static:
    aggregation_key: Application
    static_number: 3
    storage_scales_with_nodes: True
    process:
      cores_per_node: 16
      ram_per_node: 32
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0

  # queues that scale with case transactions
  celery_cases:
    aggregation_key: Application
    usage_field: 'case_transactions'
    storage_scales_with_nodes: True
    process:
      cores_per_node: 16
      ram_per_node: 32
      cores_per_sub_process: 0.6  # reduced from 1 since we use django VMs as well
      ram_per_sub_process: 0.5  # reduced from 0.7 since we use django VMs as well
      sub_processes:
        - name: 'reminder_case_update_queue'
          capacity: 6000000  # 6M changes per month (300M / 50 workers : Feb 2019)
        - name: 'ucr_indicator_queue'
          capacity: 2500000  # 2.5M per worker only processes ~50% of cases (ccs_record / child_cases)
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0

  celery_sms:
    # https://docs.google.com/spreadsheets/d/18La8-RZkkjOJ3uhwmJVXK9LLOc0dP5esQETgQ8eqcGw/edit#gid=126849162 ("Load supported per worker" table)
    aggregation_key: Application
    usage_field: 'sms_monthly'
    storage_scales_with_nodes: True
    process:
      cores_per_node: 16
      ram_per_node: 32
      cores_per_sub_process: 1
      ram_per_sub_process: 0.7
      sub_processes:
        - name: 'reminder_queue'
          capacity: 600000
        - name: 'sms_queue'
          capacity: 400000
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0

  web:
    aggregation_key: Application
    usage_field: 'preak_requests_per_15_min'
    storage_scales_with_nodes: True
    process:
      cores_per_node: 16
      ram_per_node: 32
      cores_per_sub_process: 0.7
      ram_per_sub_process: 0.7
      sub_processes:
        - name: 'gunicorn_worker'
          capacity: 1080  # 1080 requests per 15 min (1 per s) - Forecast from current throughput
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0

  redis:
    aggregation_key: Cache
    usage_capacity_per_node: 250000
    usage_field: 'preak_requests_per_15_min'
    min_storage_per_node: 50GB
    process:
      cores_per_node: 8
      ram_per_node: 64
      ram_model:
        - referenced_field: 'users'
          unit_size: 50KB
      ram_static_baseline: 33  # per node (assume only 50% ram is usable)
    storage:
      group: 'SAS'
      data_models:
        - referenced_field: 'users'
          unit_size: 50KB

  nginx:  # limits for nginx not clear
    aggregation_key: Proxy
    usage_capacity_per_node: 500000
    storage_scales_with_nodes: True
    process:
      cores_per_node: 16
      ram_per_node: 32
    storage:
      group: 'VM_other'
      static_baseline: 200GB  # logs etc
      override_storage_buffer: 0
      override_estimation_buffer: 0

  rabbitmq:  # limits for rabbitmq not clear
    aggregation_key: Message Queue
    static_number: 1
    storage_scales_with_nodes: True
    process:
      cores_per_node: 32
      ram_per_node: 64
    storage:  # don't have a model for rabbitmq storage
      group: 'SAS'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0

  formplayer:
    aggregation_key: Application
    usage_capacity_per_node: 500
    process:
      cores_per_node: 8
      ram_per_node: 16
    storage:
      group: 'SAS'
      data_models:
        - referenced_field: 'users'
          unit_size: 200MB

  control:
    static_number: 1
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      override_storage_buffer: 0
      override_estimation_buffer: 0
    process:
      cores_per_node: 4
      ram_per_node: 8
