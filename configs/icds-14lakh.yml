estimation_buffer: 0.2
estimation_growth_factor: 0.025  # buffer increases by 2.5% per month
storage_buffer: 0.25
storage_display_unit: TB

summary_dates:
  - '2018-10'
  - '2018-12'
  - '2019-02'
  - '2019-04'
  - '2019-06'
  - '2019-08'
  - '2019-11'
  - '2020-03'
  - '2020-12'

vm_os_storage_gb: 70
vm_os_storage_group: 'VM_os'

usage:
  users:
    model: 'date_range_value'
    ranges:
      # User counts based on historical data
#      - ['20170101', '20170201', 500]
#      - ['20170301', 20000]
#      - ['20170401', 40000]
#      - ['20170501', '20171001', 50000]
#      - ['20171101', 60000]
#      - ['20171201', '20180301', 90000]
#      - ['20180401', '20180501', 100000]
#      - ['20180601', '20181201', 115000]
#      - ['20190101', 120000]
      - ['20180901', '20181201', 115000]
      - ['20190101', '20190201', 120000]
      - ['20190301', '20190401', 400000]
      - ['20190501', '20190601', 500000]
      - ['20190701', '20190801', 600000]
      - ['20190901', '20191001', 700000]
      - ['20191101', '20191201', 1000000]
      - ['20200101', '20201201', 1400000]

  # LS User as a percent of total User
  ls_users:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 0.04
  # Number of formaplayer user from X date to Y
  formplayer_users:
    model: 'date_range_value'
    ranges:
      - ['20180901', '20201201', 1000]

  #Number of forms per user per month
  forms_ideal:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 1500  # https://docs.google.com/spreadsheets/d/1cvgcihfE0oOrkAPW6RlmSLzGcsaD-3nDAOKVCYjyAeE/edit#gid=1011017089
  forms_actual:
    model: 'derived_factor'
    dependant_field: 'forms_ideal'
    factor: 0.33  # on average users submit less forms. Assume 33% performance.
  # Total Forms ever created
  forms_total:
    model: 'cumulative'
    dependant_field: 'forms_actual'
    start_with: 329680028   # from ES form index (total docs)

  #Number of cases per user per month
  cases_total:
    model: 'baseline_with_growth'
    dependant_field: 'users'
    baseline: 600  # see `cases_created_per_user_per_month` in queries.yml
    monthly_growth: 54  # guess (2 cases for every new person case)
    start_with: 204427935   # from ES case index (total docs)

  case_transactions:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 1000  # see `cases_updated_per_user_month` in queries.yml
  # Total Case Transaction
  case_transactions_total:
    model: 'cumulative'
    dependant_field: 'case_transactions'
    start_with: 1240906740

  # Case indexes ever created
  case_indices:
    model: 'derived_factor'
    dependant_field: 'cases_total'
    factor: 1  # case index count (from SQL) / case count

  # used for SMS & UCR calculations
  person_case_total:
    model: 'baseline_with_growth'
    dependant_field: 'users'
    baseline: 750  # similar to task cases
    monthly_growth: 28  # https://confluence.dimagi.com/display/ICDS/Case+Structure+and+Workflow#CaseStructureandWorkflow-CASCaseSizingEstimates

  # assume 100% phone number capture rate
  phone_numbers:
    model: 'derived_sum'
    dependant_fields:
      - 'person_case_total'
      - 'users'
      - 'ls_users'

  # ledgers are on task cases
  task_cases_total:
    model: 'baseline_with_growth'
    dependant_field: 'users'
    baseline: 500  # see `cases_created_per_user_per_month` in queries.yml
    monthly_growth: 10  # guess (2 cases for every new person case)

  # 4 ledgers per task case on average
  ledgers_total:
    model: 'derived_factor'
    dependant_field: 'task_cases_total'
    factor: 4
  # 2 ledger updates per ledger on average
  ledger_updates:
    model: 'derived_factor'
    dependant_field: 'ledgers_total'
    factor: 2
  ledger_updates_per_month:
    model: 'derived_factor'
    dependant_field: 'ledgers_total'
    factor: 0.1  # 10% of ledgers get updated per month (guess)

  synclogs:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 60  # estimate from data analysis (SQL)
  synclogs_total:
    model: 'cumulative_limited_lifespan'
    dependant_field: 'synclogs'
    lifespan: 2  # we only keep synclogs for 2 months

  images:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 550  # daily feeding + THR + AG
  images_total:
    model: 'cumulative_limited_lifespan'
    dependant_field: 'images'
    lifespan: 3  # we only keep images for 3 months

  # This is modelled because it accounts for significant storage in the main PG database
  # This model could be improved or we find another way to account for this data
  # Data taken from datadog in Jan 2019. Table size peaks at 1.2M rows (120K active users)
  async_indicators:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 50  # inflated to be safe

  # See https://docs.google.com/spreadsheets/d/1vzp5kLHBm6IXKI39LTDS2pN69uMryXuBkpl7c8sxik8/edit#gid=1536669590 for sms estimates
  # (old https://docs.google.com/spreadsheets/d/16evR_N95TUBFlIr3D3ojasX7yN4odDOxH5mgcF6VCkQ/edit#gid=0)
### PHASE 1 SMS
#  sms_beneficiary:
#    model: 'derived_factor'
#    dependant_field: 'phone_numbers'
#    factor: 0.02
#  sms_aww:
#    model: 'derived_factor'
#    dependant_field: 'users'
#    factor: 1  # 2 per month (divide by 2 assuming 50% phone capture rate)
#  sms_ls:
#    model: 'derived_factor'
#    dependant_field: 'ls_users'
#    factor: 1.6  # 3 per month per user as well as 1 more every 6 months (divide by 2 assuming 50% phone capture rate)
#  sms_monthly_total:
#    model: 'derived_sum'
#    start_with: 0
#    dependant_fields:
#      - 'sms_beneficiary'
#      - 'sms_aww'
#      - 'sms_ls'
### PHASE 2 SMS (assuming 100% phone number capture rate)
  sms_adolescent_girls:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 240  # 120 adolescent girls per aws x 2 messages per month
  sms_pregnancies:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 20  # 5 pregnancies per awc X 4 messages per month
  sms_lactating_women:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 35  # 5 lactating women per awc X 5 messages per month
  sms_aww:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 5.2  # 5 per month per user as well as 1 more every 6 months
  sms_ls:
    model: 'derived_factor'
    dependant_field: 'ls_users'
    factor: 3.2  # 3 per month per user as well as 1 more every 6 months
  sms_monthly_total:
    model: 'derived_sum'
    start_with: 3438200
    dependant_fields:
      - 'sms_adolescent_girls'
      - 'sms_pregnancies'
      - 'sms_lactating_women'
      - 'sms_aww'
      - 'sms_ls'
  sms_total:
    model: 'cumulative'
    dependant_field: 'sms_monthly_total'
  sms_models_total:
    model: 'derived_factor'
    dependant_field: 'sms_total'
    factor: 10  # sms (1) + smsbillables (1) + messagingevent (4) + messagingsubevent (4)

  # casetimedscheduleinstance table in shard database
  sms_schedule_instances_total:
    model: 'derived_factor'
    dependant_field: 'person_cases_total'
    factor: 0.4  # rough guess

  kafak_changes:
    # we only keep kafka changes for 28 days so no need to calculate the cumulative amount
    model: 'derived_sum'
    dependant_fields:
      - 'forms_actual'
      - 'cases_monthly'
      - 'case_transactions'
      - 'ledger_updates_per_month'
      - 'synclogs'
      - 'sms_monthly_total'

services:
  pg_shards:
    # need higher performing SSDs
    usage_capacity_per_node: 50000
    storage:
      group: 'SSD'
      data_models:
        - referenced_field: 'forms_total'
          unit_size: 1200
        - referenced_field: 'cases_total'
          unit_size: 1800
        - referenced_field: 'case_indices'
          unit_size: 380
        - referenced_field: 'case_transactions_total'
          unit_size: 515
        - referenced_field: 'ledgers_total'
          unit_size: 450
        - referenced_field: 'ledger_updates'
          unit_size: 420
        - referenced_field: 'images_total'
          unit_size: 370
        - referenced_field: 'sms_schedule_instances_total'
          unit_size: 683
    process:
      cores_per_node: 32
      ram_per_node: 128

  pg_proxy:
    usage_capacity_per_node: 300000
    storage_scales_with_nodes: True
    storage:
      group: 'VM_other'
      static_baseline: 200GB
      add_buffer: False
      override_estimation_buffer: 0
    process:
      cores_per_node: 16
      ram_per_node: 64

  pg_main:
    usage_capacity_per_node: 250000
    storage_scales_with_nodes: True
    min_nodes: 2
    storage:
      group: 'SSD'
      static_baseline: 250GB  # to account for other static tables
      data_models:
        - referenced_field: 'phone_numbers'
          unit_size: 550
        - referenced_field: 'users'
          unit_size: 1600
        - referenced_field: 'async_indicators'
          unit_size: 6626
        - referenced_field: 'sms_models_total'
          unit_size: 510  # averaged over all models taking model ratios into account
    process:
      cores_per_node: 32
      ram_per_node: 128

  pg_synclogs:
    usage_capacity_per_node: 500000
    storage:
      group: 'SSD'
      data_models:
        - referenced_field: 'synclogs'
          unit_size: 210000
    process:
      cores_per_node: 32
      ram_per_node: 128

  couchdb:
    usage_capacity_per_node: 100000
    min_nodes: 3
    storage:
      group: 'SSD'
      redundancy_factor: 3
      static_baseline: 50GB  # to account for other databases
      data_models:
        - referenced_field: 'users'
          unit_size: 600000   # disk size / doc count of icds @ 2017-12-13
    process:
      cores_per_node: 16
      ram_per_node: 64

  es_datanode:
    usage_capacity_per_node: 25000
    min_nodes: 3
    storage:
      group: 'SAS'
      redundancy_factor: 2
      data_models:
        - referenced_field: 'forms_total'
          unit_size: 5500
        - referenced_field: 'cases_total'
          unit_size: 1800
        - referenced_field: 'case_transactions_total'
          unit_size: 250
        - referenced_field: 'ledgers_total'
          unit_size: 500
        - referenced_field: 'sms_total'
          unit_size: 675
    process:
      cores_per_node: 8
      ram_per_node: 64

  es_master:
    static_number: 3
    storage_scales_with_nodes: True
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      add_buffer: False
      override_estimation_buffer: 0
    process:
      cores_per_node: 4
      ram_per_node: 8

  kafka:
    usage_capacity_per_node: 400000
    min_nodes: 3
    storage:
      group: 'SAS'
      data_models:
        - referenced_field: 'kafak_changes'
          unit_size: 500
    process:
      cores_per_node: 16
      ram_per_node: 32

  riakcs:
    usage_capacity_per_node: 50000
    # avg attachment size of 12560 bytes (11000*0.96 + 50000*0.04)
    # RAM requirement per key = 130b
    # num keys = 10TB / (12560b x 3<redundancy factor>)
    # RAM needed = 130b x num keys = 35GB (64GB avail per node)
    max_storage_per_node: 10TB
    min_nodes: 10
    storage:
      group: 'SAS'
      redundancy_factor: 3
      static_baseline: 10TB  # to account for exports etc
      data_models:
        - referenced_field: 'forms_total'  # 96% of objects
          unit_size: 11000
        - referenced_field: 'images_total'  # 4% of objects
          unit_size: 50000
    process:
      # current load quite low (~15%) (2018-10-11)
      cores_per_node: 8
      # need to be able to fit all keys in RAM since we're using bitcask backend
      # Current usage is at 30% (2018-10-11)
      ram_per_node: 64
      ram_model:
      - referenced_field: 'forms_total'
        # key size (45 + 6 + 79) (overhead + bucket + key)
        # bucket = 'blobdb'
        # new keys are smaller but stick with old key length for safety:
        #   new: form/xxxxxxxxxxxxxxuuidxxxxxxxxxxxxxx/Xpi-XM9CZvQ
        #   old: form/xxxxxxxxxxxxxxuuidxxxxxxxxxxxxxx/form.xml.xxxxxxxxxxxxxxuuidxxxxxxxxxxxxxx
        unit_size: 130
      - referenced_field: 'images_total'
        unit_size: 130
      ram_redundancy_factor: 3
      ram_static_baseline: 1  # per node

  pg_ucr:
    usage_capacity_per_node: 100000
    storage_scales_with_nodes: True
    min_nodes: 2
    storage:
      # This is a rough estimate.
      # The person case UCR is 35% of total UCR usage.
      group: 'SSD'
      data_models:
        - referenced_field: 'person_case_total'
          unit_size: 9000  # inflated to account for others UCRs
        - referenced_field: 'cases_total'  # cumulative
          unit_size: 4000  # to account for monthly data etc.
    process:
      cores_per_node: 64
      ram_per_node: 128

  pg_ucr_citus:
    usage_capacity_per_node: 100000
    redundancy_factor: 3  # bump this up since the storage model is making lots of assumptions
    storage:
      # This is a rough estimate.
      # The person case UCR is 35% of total UCR usage.
      group: 'SSD'
      data_models:
        - referenced_field: 'person_case_total'
          unit_size: 9000  # inflated to account for others UCRs
        - referenced_field: 'cases_total'  # cumulative
          unit_size: 4000  # to account for monthly data etc.
    process:
      cores_per_node: 32
      ram_per_node: 256

  pg_warehouse:
    usage_capacity_per_node: 300000
    storage_scales_with_nodes: True
    storage:
      group: 'SSD'
      data_models:
        - referenced_field: 'forms_total'
          unit_size: 4000  # to account for monthly data etc.
    process:
      cores_per_node: 16
      ram_per_node: 128

  pg_warehouse_citus:
    usage_capacity_per_node: 250000
    redundancy_factor: 2
    storage:
      group: 'SSD'
      data_models:
        - referenced_field: 'forms_total'
          unit_size: 4000  # to account for monthly data etc.
        - referenced_field: 'cases_total'  # add cases in case we add them later
          unit_size: 4000
    process:
      cores_per_node: 32
      ram_per_node: 256

  pillowtop:  # will need to revamp this once combined pillows are rolled out
    storage_scales_with_nodes: True
    process:
      cores_per_node: 16
      ram_per_node: 32
      cores_per_sub_process: 0.5
      ram_per_sub_process: 0.7
      sub_processes:
        - name: 'other'
          capacity: 15000  # covers all other pillows
        - name: 'FormSubmissionMetadataTrackerPillow'
          capacity: 15000
        - name: 'XFormToElasticsearchPillow'
          capacity: 15000
        - name: 'kafka-ucr-static-forms'
          capacity: 5000
        - name: 'kafka-ucr-static-cases'
          capacity: 2000
        - name: 'CaseToElasticsearchPillow'
          capacity: 2000
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      add_buffer: False
      override_estimation_buffer: 0

  celery:
    storage_scales_with_nodes: True
    process:
      cores_per_node: 16
      ram_per_node: 32
      cores_per_sub_process: 1
      ram_per_sub_process: 0.7
      sub_processes:
        - name: 'reminder_case_update_queue'
          capacity: 2000
        - name: 'reminder_queue'
          capacity: 65000
        - name: 'ucr_indicator_queue'
          capacity: 5000
        - name: 'icds_dashboard_reports_queue'
          capacity: 15000
        - name: 'sms_queue'
          capacity: 32500
        - name: 'case_rule_queue'
          capacity: 120000
        - name: 'reminder_rule_queue'
          capacity: 120000
        - name: 'submission_reprocessing_queue'
          capacity: 120000
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      add_buffer: False
      override_estimation_buffer: 0

  django:
    usage_capacity_per_node: 25000
    storage_scales_with_nodes: True
    process:
      cores_per_node: 16
      ram_per_node: 32
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      add_buffer: False
      override_estimation_buffer: 0

  redis:
    usage_capacity_per_node: 400000
    min_nodes: 3
    process:
      cores_per_node: 16
      ram_per_node: 32

  nginx:  # limits for nginx not clear
    usage_capacity_per_node: 750000
    storage_scales_with_nodes: True
    process:
      cores_per_node: 8
      ram_per_node: 16
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      add_buffer: False
      override_estimation_buffer: 0

  rabbitmq:  # limits for rabbitmq not clear
    usage_capacity_per_node: 600000
    process:
      cores_per_node: 16
      ram_per_node: 32

  formplayer:
    usage_capacity_per_node: 1000
    usage_field: 'formplayer_users'
    process:
      cores_per_node: 4
      ram_per_node: 8
    storage:
      group: 'SAS'
      data_models:
        - referenced_field: 'formplayer_users'
          unit_size: 100MB  # 100MB

  airflow:
    static_number: 2
    storage_scales_with_nodes: True
    process:
      cores_per_node: 4
      ram_per_node: 8
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      add_buffer: False
      override_estimation_buffer: 0

  control:
    static_number: 1
    storage:
      group: 'VM_other'
      static_baseline: 100GB
      add_buffer: False
      override_estimation_buffer: 0
    process:
      cores_per_node: 4
      ram_per_node: 8
