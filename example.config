esitmation_buffer: 0.2

usage:
  # define the expected usage of the system in terms of number of users
  users:
    model: 'date_range_value'
    ranges:
      - ['20180101', '20181201', 700000]
      - ['20190101', '20191201', 1100000]
      - ['20200101', '20201201', 1400000]
  # define any fields that are needed for storage / compute calculations
  forms:  # new forms per month
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 600
  forms_total:  # cumulative number of forms
    model: 'cumulative'
    dependant_field: 'forms'
  cases:  # new cases created per month
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 200
  cases_total:  # cumulative number of cases
    model: 'cumulative'
    dependant_field: 'cases'
  case_transactions:  # case updates per month
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 1600
  case_transactions_total:  # cumulative case transactions
    model: 'cumulative'
    dependant_field: 'case_transactions'
  case_indices:  # case indices expressed as a ration of cases
    model: 'derived_factor'
    dependant_field: 'cases_total'
    factor: 0.92
  # an example of a field with limited lifespan (ie. get's removed after some time)
  images:  # new images per month
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 33
  images_total:  # cumulative total of images in the system
    model: 'cumulative_limited_lifespan'
    dependant_field: 'images'
    lifespan: 3
  kafak_changes:  # simple sum of other fields
    model: 'derived_sum'
    dependant_fields: ['forms', 'cases', 'case_transactions']

storage:
  # define the different categories of storage
  sql_primary:
    group: 'SSD'  # used for grouping in the summary
    static_redundancy_factor: 2
    data_models:  # fields from the usage data and how much data each item requires
      - referenced_field: 'forms_total'
        unit_bytes: 1200
      - referenced_field: 'cases_total'
        unit_bytes: 1800
      - referenced_field: 'case_indices'
        unit_bytes: 380
      - referenced_field: 'case_transactions_total'
        unit_bytes: 515
  sql_meta:
    group: 'SSD'
    static_redundancy_factor: 2
    static_baseline: 20000000000  # 20GB to account for other static tables
    data_models:
      - referenced_field: 'users'
        unit_bytes: 660
  couchdb_meta:
    group: 'SSD'
    static_redundancy_factor: 3
    static_baseline: 20000000000  # 20GB to account for other databases
    data_models:
      - referenced_field: 'users'
        unit_bytes: 600000   # disk size / doc count of icds @ 2017-12-13
  elastic:
    group: 'SAS'
    static_redundancy_factor: 2
    data_models:
      - referenced_field: 'forms_total'
        unit_bytes: 5500
      - referenced_field: 'cases_total'
        unit_bytes: 1800
      - referenced_field: 'case_transactions_total'
        unit_bytes: 250
  kafka:
    group: 'SAS'
    static_redundancy_factor: 1
    data_models:
      - referenced_field: 'kafak_changes'
        unit_bytes: 500
  riak:
    group: 'SAS'
    static_redundancy_factor: 3
    data_models:
      - referenced_field: 'forms_total'
        unit_bytes: 11000
      - referenced_field: 'images_total'
        unit_bytes: 50000

# compute model describes each service and how many users
# an instance of the service can serve
# For services with multiple processes each process
# can be defined individually and a `cores_per_process`
# and `ram_per_process` are required.

# For services with a single process the `cores_per_vm`
# and `ram_per_vm` are taken as the values for `cores_per_process`
# and `ram_per_process`
compute:
  pillowtop:
    cores_per_vm: 4
    ram_per_vm: 6
    cores_per_process: 0.5
    ram_per_process: 0.7
    processes:
      - name: 'static-ucr'
        capacity: 1875
      - name: 'ucr'
        capacity: 5625
      - name: 'cases-to-es'
        capacity: 10000
  django:
    cores_per_vm: 4
    ram_per_vm: 6
    processes:
      - capacity: 5000
