esitmation_buffer: 0.2
storage_buffer: 0.25
storage_display_unit: TB

summary_dates:
  - '2018-12'
  - '2019-12'
  - '2020-12'

vm_os_storage_gb: 70
vm_os_storage_group: 'SAS'

usage:
  users:
    model: 'date_range_value'
    ranges:
      - ['20180101', '20181201', 700000]
      - ['20190101', '20191201', 1100000]
      - ['20200101', '20201201', 1400000]
  formplayer_users:
    model: 'date_range_value'
    ranges:
      - ['20180101', '20181201', 1000]
      - ['20190101', '20191201', 1000]
      - ['20200101', '20201201', 1000]
  forms:
    model: 'derived_factor'
    start_with: 91000000
    dependant_field: 'users'
    factor: 220
  forms_total:
    model: 'cumulative'
    dependant_field: 'forms'
  cases:
    start_with: 87000000
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 600
  cases_total:
    model: 'cumulative'
    dependant_field: 'cases'
  case_transactions:
    start_with: 350000000
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 1000
  case_transactions_total:
    model: 'cumulative'
    dependant_field: 'case_transactions'
  task_cases:
    start_with: 7000000
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 70
  task_cases_total:
    model: 'cumulative_limited_lifespan'
    dependant_field: 'task_cases'
    lifespan: 3
  person_cases:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 2300
  phone_numbers:
    model: 'derived_factor'
    dependant_field: 'person_cases'
    factor: 1
  task_ledgers:
    start_with: 23000000
    model: 'derived_factor'
    dependant_field: 'task_cases'
    factor: 15
  task_ledger_updates:
    model: 'derived_factor'
    dependant_field: 'task_cases'
    factor: 25
  synclogs:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 35
  device_logs:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 1600
  device_logs_total:
    model: 'cumulative_limited_lifespan'
    dependant_field: 'device_logs'
    lifespan: 1
  images:
    model: 'derived_factor'
    dependant_field: 'users'
    factor: 35
  images_total:
    model: 'cumulative_limited_lifespan'
    dependant_field: 'images'
    lifespan: 3
  case_indices:
    model: 'derived_factor'
    dependant_field: 'cases_total'
    factor: 1
#  sms:
#    model: 'derived_factor'
#    dependant_field: 'users'
#    factor: ?
  kafak_changes:
    model: 'derived_sum'
    dependant_fields: ['forms', 'cases', 'case_transactions', 'task_ledger_updates']  # sms

storage:
  sql_primary:
    group: 'SSD'
    static_redundancy_factor: 2
    data_models:  
      - referenced_field: 'forms_total'
        unit_bytes: 1200
      - referenced_field: 'cases_total'
        unit_bytes: 1800
      - referenced_field: 'case_indices'
        unit_bytes: 380
      - referenced_field: 'case_transactions_total'
        unit_bytes: 515
      - referenced_field: 'task_ledgers'
        unit_bytes: 450
      - referenced_field: 'task_ledger_updates'
        unit_bytes: 420
  sql_device_logs:
    group: 'SAS'
    static_redundancy_factor: 1
    data_models:
      - referenced_field: 'device_logs_total'
        unit_bytes: 1200
  sql_meta:
    group: 'SSD'
    static_redundancy_factor: 2
    static_baseline: 20000000000  # 20GB to account for other static tables
    data_models:
      - referenced_field: 'phone_numbers'
        unit_bytes: 660
#      - referenced_field: 'sms'
#        unit_bytes: ?
  couchdb_synclogs:
    group: 'SSD'
    # 2 per 100K users
    dynamic_redundancy_factor:
      referenced_field: 'users'
      factor: 0.00002
    data_models:
      - referenced_field: 'synclogs'
        unit_bytes: 500000  # tries to take into account DB bloat
  couchdb_meta:
    group: 'SSD'
    static_redundancy_factor: 3
    static_baseline: 20000000000  # 20GB to account for other databases
    data_models:
      - referenced_field: 'users'
        unit_bytes: 600000   # disk size / doc count of icds @ 2017-12-13
  elastic:
    group: 'SAS'
    static_redundancy_factor: 2
    data_models:
      - referenced_field: 'forms_total'
        unit_bytes: 5500
      - referenced_field: 'cases_total'
        unit_bytes: 1800
      - referenced_field: 'case_transactions_total'
        unit_bytes: 250
      - referenced_field: 'task_ledgers'
        unit_bytes: 500
  kafka:
    group: 'SAS'
    static_redundancy_factor: 1
    data_models:
      - referenced_field: 'kafak_changes'
        unit_bytes: 500
  riak:
    group: 'SAS'
    static_redundancy_factor: 3
    static_baseline: 100000000000  # 100GB to account for exports etc
    data_models:
      - referenced_field: 'forms_total'
        unit_bytes: 11000
      - referenced_field: 'images_total'
        unit_bytes: 50000
  ucr:
    # This is a rough estimate.
    # The person case UCR is 35% of total UCR usage.
    group: 'SSD'
    # This attempts to model the fact that we need to
    # scale out the DBs in ratio to the number of users
    # 2 per 100K users
    dynamic_redundancy_factor:
      referenced_field: 'users'
      factor: 0.00002
    data_models:
      - referenced_field: 'person_cases'
        unit_bytes: 3500  # inflated to account for others UCRs
#  warehouse:  # TODO

compute:
  pillowtop:
    cores_per_vm: 4
    ram_per_vm: 6
    cores_per_process: 0.5
    ram_per_process: 0.7
    processes:
      - name: 'static-cases'
        capacity: 2000
      - name: 'case-to-es'
        capacity: 5000
      - name: 'ucr-static-forms'
        capacity: 7500
      - name: 'forms-to-es'
        capacity: 15000
      - name: 'other'  # covers the other 18 processes
        capacity: 3000
      - name: 'form-submission-meta'
        capacity: 15000
  celery:
    cores_per_vm: 8
    ram_per_vm: 16
    cores_per_process: 0.5
    ram_per_process: 0.7
    processes:
      - name: 'other'
        static_number: 30
      - name: 'pillow_retry_queue'
        capacity: 100000
      - name: 'submission_reprocessing_queue'
        capacity: 100000
      - name: 'reminder_case_update_queue'
        capacity: 50000
      - name: 'reminder_queue'
        capacity: 100000
      - name: 'reminder_rule_queue'
        capacity: 100000
      - name: 'sms_queue'
        capacity: 50000
      - name: 'async_restore_queue'
        capacity: 10000
      - name: 'ucr_indicator_queue'
        capacity: 3000
  django:
    cores_per_vm: 8
    ram_per_vm: 16
    processes:
      - capacity: 20000
  pg_shards:
    cores_per_vm: 16
    ram_per_vm: 48
    processes:
      - capacity: 50000
  pg_ucr:
    cores_per_vm: 16
    ram_per_vm: 48
    processes:
      - capacity: 50000
  pg_auth_meta:
    cores_per_vm: 16
    ram_per_vm: 48
    processes:
      - capacity: 100000
  elastic:
    cores_per_vm: 8
    ram_per_vm: 64
    processes:
      - capacity: 20000
  redis:
    cores_per_vm: 4
    ram_per_vm: 8
    processes:
      - capacity: 100000
  nginx:
    cores_per_vm: 4
    ram_per_vm: 8
    processes:
      - capacity: 100000
  couch:
    cores_per_vm: 4
    ram_per_vm: 16
    processes:
      - capacity: 30000
  rabbitmq:
    cores_per_vm: 4
    ram_per_vm: 8
    processes:
      - capacity: 100000
  kafka:
    cores_per_vm: 4
    ram_per_vm: 8
    processes:
      - capacity: 100000
  formplayer:
    cores_per_vm: 4
    ram_per_vm: 8
    processes:
      - capacity: 1000
        usage_field: 'formplayer_users'
